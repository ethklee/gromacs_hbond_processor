"""
parser.py

Functions used to parse through GROMACS hbond files for hydrogen bond analysis.

Specifically, listed here are functions used to parse GROMACS '.ndx', '.gro', and '.xpm' files
made by 'gmx hbond', and extract data for further analysis.

Author: Ethan Lee
Created: 2021-06-19
"""

import numpy as np

def hbond_ndx_import(filename):
    """
    Parse a GROMACS .ndx file produced by the 'gmx hbond' tool.

    This function extracts hydrogen bond group labels and corresponding atom index lists 
    from the .ndx file.

    Parameters
    ----------
    filename : str
        Path to the '.ndx' file generated by GROMACS.

    Returns
    -------
    tuple[list[str], list[list[list[int]]]]
        A tuple containing:
        - A list of group labels (str)
        - A list of atom index lists (each corresponding to a group)
    """

    labels = []
    all_arr = []
    arr = []
    with open(filename) as file_object:
        for line in file_object:
            
            # Parse out group labels
            if line.startswith('['):
                labels.append(line[2:-3])
                if len(labels) != 1:
                    all_arr.append(arr)
                    arr = []

            # Otherwise append group indices
            else:
                arr.append(list(map(int, line.split())))

        # Append last group indices to collection
        all_arr.append(arr)

    return labels, all_arr

def gro_import(filename):
    """
    Parse a GROMACS .gro file and extract atomic coordinates and metadata.

    Skips the first two lines (title and atom count) and the last line (box vectors).
    Each atom entry is parsed into a list containing residue number, residue name, 
    atom name, atom number, and x/y/z coordinates.

    Parameters
    ----------
    filename : str
        Path to the '.gro' file.

    Returns
    -------
    list of list
        A list of atom entries, where each entry is:
        [residue number (int), residue name (str), atom name (str), 
         atom number (int), x (float), y (float), z (float)]
    """

    atom_data = []

    with open(filename) as file:
        # Skip the first 2 lines (title and atom count) and last line (box dimensions)
        lines = file.readlines()[2:-1]

    for line in lines:
        res_num = int(line[:5])
        res_name = line[5:8]
        atom_name = line[8:15].strip()
        atom_num = int(line[15:20])
        x = float(line[20:28])
        y = float(line[28:36])
        z = float(line[36:44])

        atom_data.append([res_num, res_name, atom_name, atom_num, x, y, z])

    return atom_data

def hbond_xpm_import(filename):
    """
    Parse and process a GROMACS hydrogen bond map (.xpm) file.

    This function extracts:
    - Time points along the trajectory (from the x-axis labels)
    - A binary matrix representing hydrogen bond presence (1 = bond, 0 = no bond)
    - Percentage occupancy for each hydrogen bond across all frames

    Note:
    The order of hydrogen bonds in the returned matrix is reversed relative to the atom
    indices in the corresponding .ndx file from 'gmx hbond' - the first atoms listed in
    the final section of the '.ndx' file correspond to the last row of this matrix.

    Parameters
    ----------
    filename : str
        Path to the '.xpm' file generated by GROMACS 'gmx hbond'.

    Returns
    -------
    tuple
        A tuple containing:
        - time : numpy.ndarray
            1D array of time values in picoseconds.
        - matrix : numpy.ndarray
            2D array (n_hbonds, n_frames) with binary values (1 = bond present, 0 = absent).
        - occupancy : numpy.ndarray
            1D array of occupancy percentages for each hydrogen bond.
    """

    matrix = []
    time = []
    with open(filename) as file:
        for line in file:

            # Parse timesteps first
            if '/* x-axis:' in line:
                time.append(line[10:-3].split())

            # Parse hydrogen bond matrix next
            if not '*' in line:
                matrix.append(line[1:])

    # Flatten timesteps to 1D array
    flat_t = np.array([float(item) for sublist in time for item in sublist])

    # Transform string matrix to binary matrix
    del matrix[0] # Remove header
    string_matrix = [list(s) for s in matrix]

    binary_matrix = []
    for line in string_matrix:
        binary_line = []
        for item in line:
            if item == 'o':
                binary_line.append(1) # hbond present
            elif item == ' ':
                binary_line.append(0) # hbond not present
        binary_matrix.append(binary_line)

    # Compute occupancy of each hydrogen bond
    occ = np.array([bond.count(1) / len(bond) * 100 for bond in binary_matrix])
    final_matrix = np.array(binary_matrix)

    return flat_t, final_matrix, occ